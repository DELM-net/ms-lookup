<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">

<title>Manuscript Look-up Service</title>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor" crossorigin="anonymous">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,500" />

<style>

body {
	font-family: 'Open Sans', sans-serif;
	font-size: 1.2em;
}
h1, .display-6 {
	font-size: 2em;
}
h2 {
	font-size: 1.5em;
}
a, a:visited {
	color:  #2874a6;
}	

</style>
</head>
<body class="bg-light">
    <div class="container mt-5">
        <h1>Manuscript Look-up Service</h1>

<!-- ChatGPT code below -->


<form id="dataForm">
    <label for="dropdown">Select an option:</label>
    <select id="dropdown">
      <!-- Options will be loaded dynamically from CSV -->
    </select>
    <br>
    <label for="textInput">Enter some text:</label>
    <input type="text" id="textInput">
    <br>
    <button type="button" onclick="submitForm()">Submit</button>
  </form>

  <hr>

  <h2>Combined Results</h2>
  <table id="combinedResultsTable">
    <!-- Table content will be populated dynamically -->
  </table>

  <script>
    // Function to fetch CSV data
    async function fetchCSV(url) {
      const response = await fetch(url);
      const data = await response.text();
      return data;
    }

    // Function to parse CSV into array of arrays
    function parseCSV(csv) {
      const rows = csv.trim().split('\n');
      return rows.map(row => {
        const unescapedRow = [];
        let insideQuotes = false;
        let currentField = '';

        for (let i = 0; i < row.length; i++) {
          const char = row[i];

          if (char === '"') {
            // Toggle insideQuotes when encountering a quote mark
            insideQuotes = !insideQuotes;
          } else if (char === ',' && !insideQuotes) {
            // If it's a comma and not inside quotes, push the current field to the array
            unescapedRow.push(currentField);
            currentField = '';
          } else {
            // Otherwise, add the character to the current field
            currentField += char;
          }
        }

        // Push the last field after the loop
        unescapedRow.push(currentField);
        return unescapedRow;
      });
    }

    // Function to submit form
    async function submitForm() {
      const selectedOption = document.getElementById('dropdown').value;
      const enteredText = document.getElementById('textInput').value;

      // Load CSV files listed in the first column of the second CSV file
      const csvFiles = await fetchCSV('https://raw.githubusercontent.com/DELM-net/ms-lookup/main/metadata/linked-resources.csv');
      const csvFilesData = parseCSV(csvFiles);

      // Array to store promises for loading CSV files
      const csvPromises = [];

      // Loop through CSV files listed in the first column
      for (let i = 0; i < csvFilesData.length; i++) {
        const csvFileName = 'https://raw.githubusercontent.com/DELM-net/ms-lookup/main/data/' + csvFilesData[i][0];

        // Load and process each CSV file
        const csvFilePromise = fetchCSV(csvFileName)
          .then(csvData => {
            const data = parseCSV(csvData);

            // Filter data based on selected option and entered text
            const filteredData = data.filter(row => row[0] === selectedOption && row[1] === enteredText);

            return filteredData;
          });

        csvPromises.push(csvFilePromise);
      }

      // Wait for all CSV files to be loaded and processed
      const results = await Promise.all(csvPromises);

      // Combine results from all CSV files into a single array
      const combinedResults = results.flat();

      // Display combined results in a table
      displayCombinedResults(combinedResults);
    }

    // Function to display combined results in a table
    function displayCombinedResults(results) {
    const table = document.getElementById('combinedResultsTable');
    table.innerHTML = ''; // Clear previous content

    if (results.length === 0) {
        // If no results found, display a message
        const noResultsRow = document.createElement('tr');
        const noResultsCell = document.createElement('td');
        noResultsCell.textContent = 'No results found.';
        noResultsCell.colSpan = 2; // Set the colspan according to the number of columns
        noResultsRow.appendChild(noResultsCell);
        table.appendChild(noResultsRow);
        return; // Exit the function
    }

    // Create table header
    const headerRow = document.createElement('tr');
    for (let i = 1; i < results[0].length; i++) { // Start from i=1 to omit the first column
        const headerCell = document.createElement('th');
        headerCell.textContent = `Column ${i}`;
        headerRow.appendChild(headerCell);
    }
    table.appendChild(headerRow);

    // Create table rows for each result
    for (let i = 0; i < results.length; i++) {
        const row = document.createElement('tr');
        for (let j = 1; j < results[i].length; j++) { // Start from j=1 to omit the first column
        const cell = document.createElement('td');
        if (j === 2) { // For column 2
            const link = document.createElement('a');
            link.href = results[i][j]; // Assuming the URL is in the third column
            link.textContent = results[i][j]; // Use the URL as the link text
            link.target = "_blank"; // Open the link in a new tab
            cell.appendChild(link);
        } else {
            cell.textContent = results[i][j];
        }
        row.appendChild(cell);
        }
        table.appendChild(row);
    }
    }



    // Function to populate dropdown with CSV data
    async function populateDropdown(url) {
      const csv = await fetchCSV(url);
      const data = parseCSV(csv);
      const dropdown = document.getElementById('dropdown');
      for (let i = 1; i < data.length; i++) { // Ignore first row
        const option = document.createElement('option');
        option.value = data[i][0];
        option.textContent = data[i][1];
        dropdown.appendChild(option);
      }
    }

    // Load dropdown options and table content on page load
    window.onload = function() {
      populateDropdown('https://raw.githubusercontent.com/DELM-net/ms-lookup/main/metadata/ms-catalogues.csv');
    };
  </script>


<!-- ChatGPT code ends -->
<!--

URLs:
https://raw.githubusercontent.com/DELM-net/ms-lookup/main/metadata/ms-catalogues.csv
https://raw.githubusercontent.com/DELM-net/ms-lookup/main/metadata/linked-resources.csv


-->


    </div>
</body>
</html>
